import random

# intialize blank connect four board
blank = [['0' for _ in range(7)] for _ in range(6)]

# function returns column i of the board, i = 0, 1, ..., 6
def column_i(board, i):
    return [sublist[i] for sublist in board]

# print board in an easily readable format
def print_board(board):
    for i in range(len(board)):
        print(board[i])
 # col_count[i] represents the number of times a player has placed a stone in column i, i = 0, 1, ..., 6
col_count = [0 for i in range(7)]



# input: board arrangement board, row i, player x marker mark
# output: only if player x win via horizontal/vert at row/col i

def horizontal_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    for k in range(4):
        if board[i][k:k + 4] == win:
            return True, mark, 'wins'
    
def vertical_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    col_i = column_i(board, i)
    for k in range(4):
        if col_i[k:k + 4] == win:
            return True, mark, 'wins'


# input: does player mark have horizontal/vert win in any row/col
# output: only if player x win via horizontally/vert

def hor_all_win_chk(board, mark):
    for i in range(6):
        if horizontal_win_chk(board, i, mark)[0] == True:
            return True, mark, 'wins'

def vert_all_win_chk(board, mark):
    for i in range(7):
        if vertical_win_chk(board, i, mark)[0] == True:
            return True, mark, 'wins'



def valid_choice(i):                                     
    if isinstance(i, int) and 0 <= i <= 6:            
        return True                         
    else:
        return False                      
        
def col_limit(x):
    for i in range(7):
        if x.count(i) > 6:
            return False
    return True

def turn_limit(x):
    if len(x) < 42:
        return True
    else:
        return False


def turn_and_col_lim(x):
    if turn_limit(x) == True and col_limit(x) == True:
        return True
    else:
        return False



def turn_col_valid_choice(x, i):
    if turn_and_col_lim(x) == True and valid_choice(i) == True:
        return True
    else:
        return False


def next_pos_valid(x, i):
    if valid_col(i) == True and turn_and_col_lim(x + [i]) == True:
        return True
    else:
        return False


def whose_turn(turn_num, player):      
    if turn_num % 2 == 0:
        return player[0]
    if turn_num % 2 == 1:
        return player[1]

# z = [0, 1, 2, 3, 4, 5, 6] initial column choice
z = [i for i in range(7)]

# initial turn num
turn_num = 0

# intital pos seq
x = []

def players(start):
    if 'play' in x:
        player1 = input('player 1 choose any character: ')
        player2 = input('player 2 choose any character: ')
        player = [player1, player2]
        return player

def user_game(blank):
    print('type play')  
    start = input()
    players(start)
    print(player)
    
    turn_num = 0
    x = []
    z = [i for i in range(7)]

    while turn_limit(x) == True:
        whose_turn(turn_num, player)
        pos_seq = pos_seq + [x]
        board[5 - col_count[x]][x] = turn(turn_num, 'L', 'K')
        turn_num = turn_num + 1
        col_count[x] = col_count[x] + 1
        parity = parity + 1

        print(pos_seq)
        print(col_count)
        print(turn_num)
        print_board(board)
        

    
    return place(board, turn_num, parity, pos_seq)






    
