blank = [['0' for _ in range(7)] for _ in range(6)]

for i in range(6):
    print(blank[i])
         
         
def valid_move(board, j):
    if '0' not in board[0][j]:
        return 'invalid move'
    elif '0' in board[0][j]:
        return 'valid move'
        

# input: column j = 0, 1, 2, 3, 4, 5, 6 to place chip
# output: new board arrangment 
def four_placement(board, j, m):
    if 'invalid move' in valid_move(board, j):
        print('Player', m)
        j = int(input(' choose valid column'))
        return four_placement(board, j, m)
    elif '0' in board[5][j]:
        board[5][j] = m
        return board
    for i in range(len(board)):
        if '0' not in board[i][j]:
            board[i - 1][j] = m
            return board
board = blank
#for i in range(7):
 #   board = four_placement(board, 3, 'L')
  #  print(board)
  
# print(four_placement(blank, 1)[0])   
# input: board arrangement board, row i, player x marker mark
# output: does player x win via horizontal at row i
def horizontal_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    for k in range(4):
        if board[i][k:k + 4] == win:
            return mark, 'wins'
    return "not win"
    
def vertical_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    col_i = column(board, i)
    for k in range(4):
        if col_i[k:k + 4] == win:
            return mark, 'wins'
    return 'not win'

hor_win = [[0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 'L', 0, 'L', 'L']]
# print(hor_win[5][k:k + 4)
# print(horizontal_win_chk(hor_win, 5, 'L'))
# print(vertical_win_chk(hor_win, 0, 'L'))

blank = [[0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0]]
def game(board, turn_number):
    turn_number = 0
    mark1 = input("Player 1 choose marker ")
    mark2 = input("player 2 choose marker ")
    mark = [mark1, mark2]
    parity = 0
    column_count = [0 for i in range(7)]
    while turn_number <= 42:
        print('Player', mark[parity])
        column_choice = int(input('choose column '))
        column_count[column_choice] = column_count[column_choice] + 1
        print(column_count)
    
        if column_count[column_choice] == 6:
            print('Player', mark[parity])
            column_choice = int(input('choose valid column '))
            return game(board, turn_number)
        
        if turn_number == 0:
            board = four_placement(blank, column_choice, mark[parity])
        elif turn_number > 0:
            board = four_placement(board, column_choice, mark[parity])
    
        for i in range(6):
            print(board[i])
    
    
    
    turn_number = turn_number + 1
    
    if parity == 0:
        parity = parity + 1
    elif parity == 1:
        parity = parity - 1
    else:
        print(' problem ')
game(blank, 0)
