blank = [[None for _ in range(7)] for _ in range(6)]

blank = [[0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0]]
         
# input: column j = 1, 2, 3, 4, 5, 6, 7 to place chip
# output: new board arrangment 
def four_placement(board, j, m):
    if isinstance(j, int) == False:
        return 'columns numbered integer one to seven'
    elif j not in range(1, 8):
        return 'one to seven'
    j = j - 1
    if board[0][j] != 0:
        return 'column full'
    elif board[5][j] == 0:
        board[5][j] = m
        return board, 5, j
    else:
        for i in range(len(board)):
            if board[i][j] != 0:
                board[i - 1][j] = m
                return board, i - 1, j
            
# print(four_placement(blank, 1)[0])   
# input: board arrangement board, row i, player x marker mark
# output: does player x win via horizontal at row i
def horizontal_win_chk(board, i, mark, player):
    win = [mark, mark, mark, mark]
    for k in range(4):
        if board[k:k + 4] == win:
            return Player, 'wins'
    return "not win"


turn_number = 0
mark1 = input("Player 1 choose marker ")
mark2 = input("player 2 choose marker ")
mark = [mark1, mark2]
parity = 0
while turn_number <= 42:
    print('Player', mark[parity])
    column_choice = int(input('choose column '))
    if turn_number == 0:
        board = four_placement(blank, column_choice, mark[parity])
    elif turn_number > 0:
        board = four_placement(blank, column_choice, mark[parity])
        
    print(board[0])
    
    
    
    turn_number = turn_number + 1
    
    if parity == 0:
        parity = parity + 1
    elif parity == 1:
        parity = parity - 1
    else:
        print(' problem ')
