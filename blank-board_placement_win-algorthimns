import random
blank = [['0' for _ in range(7)] for _ in range(6)]

# for i in range(6):
    # print(blank[i])
         
         
         
# print(('0' in blank[5][3]) == True)

def column_i(board, i):
    return [sublist[i] for sublist in board]
column_2 = column_i(blank, 2)
# print(column_2)
# def valid_move(board, j):
    
# print(valid_move(blank, 3))      

board = [['0', '0', '0', 'L', '0', '0', '0'],
['0', '0', '0', 'L', '0', '0', '0'],
['0', '0', '0', 'L', '0', '0', '0'],
['0', '0', '0', 'L', '0', '0', '0'],
['0', '0', '0', 'L', '0', '0', '0'],
['0', '0', 'L', 'L', '0', '0', '0']]

# print(column_i(board,2 ))
# print(swap(column_i(board, 2)))
# col = swap(column_i(board,2 ))

def print_board(board):
    for i in range(len(board)):
        print(board[i])
    
# print_board(blank)
    
def valid_move(x, i):
    if x[i] < 6:
        return True
    elif x[i] >= 6:
        return False
    
board = blank
col_count = [0 for i in range(7)]
# print(col_count)
turn_num = 0
i = 0
inital_pos_seq = [0 for i in range(42)]

def place(board, turn_num, parity, pos_seq):
    
    while turn_num < 42:
        if parity == 0:
            i = int(input('Player K column choice '))
            if valid_move(col_count, i) == True:
                pos_seq[turn_num] = i
                board[5 - col_count[i]][i] = 'K'
                turn_num = turn_num + 1
                col_count[i] = col_count[i] + 1
                parity = parity + 1
            else:
                return place(board, turn_num, parity, pos_seq)

            print_board(board)
        
        else:
            i = int(input('Player L column choice '))
            if valid_move(col_count, i) == True:
                pos_seq[turn_num] = i
                board[5 - col_count[i]][i] = 'L'
                turn_num = turn_num + 1
                col_count[i] = col_count[i] + 1
                parity = parity - 1
            else:
                return place(board, turn_num, parity, pos_seq)
            print_board(board)
    return place(board, turn_num, parity, pos_seq)

def connect_four(x):
    if 'Play' in x:
        return place(blank, 0, 0, inital_pos_seq)
# connect_four('Play')
    
# print(four_placement(blank, 1)[0])   
# input: board arrangement board, row i, player x marker mark
# output: does player x win via horizontal at row i
def horizontal_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    for k in range(4):
        if board[i][k:k + 4] == win:
            return True, mark, 'wins'
    return "not win"
    
def vertical_win_chk(board, i, mark):
    win = [mark, mark, mark, mark]
    col_i = column_i(board, i)
    for k in range(4):
        if col_i[k:k + 4] == win:
            return True, mark, 'wins'
    return 'not win'

def hor_all_win_chk(board, mark):
    for i in range(6):
        if horizontal_win_chk(board, i, mark)[0] == True:
            return mark, 'wins'
    else:
        return 'not win'
def vert_all_win_chk(board, mark):
    for i in range(7):
        if vertical_win_chk(board, i, mark)[0] == True:
            return mark, 'wins'
    else:
        return 'not win'

A = [[0, 0, 0, 0, 0, 0, 0], 
         [0, 0, 0, 0, 0, 0, 0], 
         ['0', 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 0, 0, 0, 0], 
         ['L', 0, 0, 0, 0, 0, 0], 
         ['L', 'L', 'L', 'L', 0, 'L', 0]]
print(hor_all_win_chk(A, 'L'))
print(vert_all_win_chk(A, 'L'))
def valid_position_sequence(x):
    if len(x) > 42:
        print('turn limit violation')
        return False
    for i in range(7):
        if x.count(i) > 6:
            return False
    return True
    
x = [0 for _ in range(6)] + [ 1 for _ in range(6)]
# print(x)
# print(valid_position_sequence(x))

def next_pos(pos, i):
    if valid_position_sequence(pos + [i]) == True:
        return pos + [i]
    else:
        return valid_position_sequence(pos + [i])
# print(next_pos(x, 2))

def position_score(position):
    if valid_position_sequence(position) == True:
        turn_number = len(position)
        if turn_number % 2 == 0:
            return 0
        elif turn_number % 2 == 1:
            return 1
    else:
        return 'invalid'
#print(valid_position_sequence([0 for _ in range(8)]))
#print(position_score([0 for _ in range(8)]))
y = random.randrange(0, 7, 1)
print(y)

# place(board, turn_num, parity, pos_seq)

# print(blank)
def random_game(n):
    z = [i for i in range(7)]
    col_count = [0 for i in range(7)]
    turn_num = 0
    board = blank
    while win(board) == False and turn_num < 42:
        x = random.choice(z)
        place(board, turn_num, parity, pos_seq)
        col_count[x] = col_count[x] + 1
        for i in range(7):
            if col_count[i] == 6:
                z.pop(i)
        turn_num = turn_num + 1
            
def turn(turn_num, m, n):      
    if turn_num % 2 == 0:
        return m
    if turn_num % 2 == 1:
        return n

def random_game(board, turn_num, parity, pos_seq):
    while turn_num < 42:
        print(z)
        x = random.choice(z)
        print(x)
        pos_seq = pos_seq + [x]
        board[5 - col_count[x]][x] = turn(turn_num, 'L', 'K')
        turn_num = turn_num + 1
        col_count[x] = col_count[x] + 1
        parity = parity + 1
                
        print(col_count)
        print(turn_num)
        print_board(board)
        print(pos_seq)
        
        for i in range(len(col_count)):
            if col_count[i] > 6:
                col_count.remove(6)
                z.pop(i)
    
    return place(board, turn_num, parity, pos_seq)

col_count = [0 for i in range(7)]
z = [i for i in range(7)]
parity = 0
pos_seq = [0]
random_game(blank, 0, 0, [0])

# given a turn number, whose turn is it? player m or n
def turn(turn_num, m, n):      
    if turn_num % 2 == 0:
        return m
    if turn_num % 2 == 1:
        return n
        

col_count = [6, 1, 1, 0, 3, 1, 1]
col_count.remove(6)
print(col_count)
    
